.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

***********************************************************************
.subckt fa a b c sum carry
  Xsub1 a b f nand2
  Xsub2 a f g nand2 
  Xsub3 b f h nand2
  Xsub4 g h x nand2
  Xsub5 x c i nand2
  Xsub6 x i j nand2
  Xsub7 c i k nand2
  Xsub8 j k sum nand2
  Xsub9 f i carry nand2
.ends
***********************************************************************
.subckt add32 a[31:0] b[31:0] cin0 sum[31:0] cout[31:30]
  Xadd a[31:0] b[31:0]  cout[30:0] cin0 
  + sum[31:0] cout[31:0] fa
.ends
***********************************************************************
.subckt bool32 a[31:0] b[31:0] op[3:0] fbool[31:0]
  Xmux a[31:0] b[31:0] op0#32 op1#32 op2#32 op3#32 fbool[31:0] mux4
.ends
***********************************************************************
.subckt as32 a[31:0] b[31:0] op0 fas[31:0] n v z
  Xinv b[31:0] b_inv[31:0] inverter
  Xmux op0#32 b[31:0] b_inv[31:0] b_in[31:0] mux2
  Xadd a[31:0] b_in[31:0] op0 fas[31:0] c_out[31:30] add32
  .connect fas31 n
  Xv c_out31 c_out30 v xor2
  Xz1 fas[31:0:4] fas[30:0:4] fas[29:0:4] fas[28:0:4] z[7:0] nor4
  Xz2 z[7:0:4]    z[6:0:4]    z[5:0:4]    z[4:0:4]    z[9:8] nand4
  Xz3 z9 z8 z nor2
.ends
*********************************************************************** 0.92ns
.subckt shift32 a[31:0] b[4:0] op[1:0] fshift[31:0]
  Xand op1 a31 s and2
  Xshft1 b0#32 a[31:0]    a[30:0]    0    l0_[31:0] mux2
  Xshft2 b1#32 l0_[31:0]  l0_[29:0]  0#2  l1_[31:0] mux2
  Xshft3 b2#32 l1_[31:0]  l1_[27:0]  0#4  l2_[31:0] mux2
  Xshft4 b3#32 l2_[31:0]  l2_[23:0]  0#8  l3_[31:0] mux2
  Xshft5 b4#32 l3_[31:0]  l3_[15:0]  0#16 l4_[31:0] mux2
  Xshft6 b0#32 a[31:0]    s    a[31:1]    r0_[31:0] mux2
  Xshft7 b1#32 r0_[31:0]  s#2  r0_[31:2]  r1_[31:0] mux2
  Xshft8 b2#32 r1_[31:0]  s#4  r1_[31:4]  r2_[31:0] mux2
  Xshft9 b3#32 r2_[31:0]  s#8  r2_[31:8]  r3_[31:0] mux2
  Xshft10 b4#32 r3_[31:0]  s#16 r3_[31:16] r4_[31:0] mux2
  Xslct11 op0#32 l4_[31:0] r4_[31:0] fshift[31:0] mux2
.ends
***********************************************************************
.subckt cmp32 n v z op[2:1] fcmp[31:0]
  .connect 0 fcmp[31:1]
  Xxor n v n_in xor2
  Xor  z n_in leq or2
  Xmux op1 op2 0 z n_in leq fcmp0 mux4
.ends
***********************************************************************
.subckt alu32 a[31:0] b[31:0] alufn[5:0] f[31:0]
  Xas  a[31:0] b[31:0] alufn0     fas[31:0] n v z as32
  Xbol a[31:0] b[31:0] alufn[3:0] fbool[31:0]     bool32
  Xshi a[31:0] b[4:0]  alufn[1:0] fshift[31:0]    shift32
  Xcmp n   v   z       alufn[2:1] fcmp[31:0]      cmp32
  Xmux alufn4#32 alufn5#32 fas[31:0] fbool[31:0] fshift[31:0] fcmp[31:0] f[31:0] mux4
.ends
***********************************************************************
.subckt join S T
  .connect S T
.ends
***********************************************************************
***********************************************************************
***********************************************************************
Xmemory  vdd  0    0   pcout[8:2]    inst[31:0]
+        vdd  0    0   mema[8:2]  memrd[31:0]
+        0    clkn  wr_  mema[8:2]  memwd[31:0]
+ $memory width=32 nlocations=128 file="lab8check.bin"

***********************************************************************
Xregisters  vdd  0    0      ra1_[4:0]  rd1_[31:0]
+           vdd  0    0      ra2_[4:0]  rd2_[31:0]
+           0    clkn  werf_  wa[4:0]    wd[31:0]
+ $memory width=32 nlocations=32 contents=(
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+ )
***********************************************************************
Xcontrol vdd 0 0 z opcode[5:0] control[13:0]
+ $memory width=14 nlocations=128 contents=(
+ 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+ 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+ 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+ 0b00011000000001 0b00110000000010 0b11000000000000 0b10000000000001 0b11000000000000 0b00000000000001 0b01000000000001 0b11000000000000
+ 0b00000100000001 0b00000100000101 0b11000000000000 0b11000000000000 0b00000111001101 0b00000111010101 0b00000111011101 0b11000000000000
+ 0b00000101100001 0b00000101111001 0b00000101011001 0b11000000000000 0b00000110000001 0b00000110000101 0b00000110001101 0b11000000000000
+ 0b00010100000001 0b00010100000101 0b11000000000000 0b11000000000000 0b00010111001101 0b00010111010101 0b00010111011101 0b11000000000000
+ 0b00010101100001 0b00010101111001 0b00010101011001 0b11000000000000 0b00010110000001 0b00010110000101 0b00010110001101 0b11000000000000
+ 
+ 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+ 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+ 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+ 0b00011000000001 0b00110000000010 0b11000000000000 0b10000000000001 0b11000000000000 0b01000000000001 0b00000000000001 0b11000000000000
+ 0b00000100000001 0b00000100000101 0b11000000000000 0b11000000000000 0b00000111001101 0b00000111010101 0b00000111011101 0b11000000000000
+ 0b00000101100001 0b00000101111001 0b00000101011001 0b11000000000000 0b00000110000001 0b00000110000101 0b00000110001101 0b11000000000000
+ 0b00010100000001 0b00010100000101 0b11000000000000 0b11000000000000 0b00010111001101 0b00010111010101 0b00010111011101 0b11000000000000
+ 0b00010101100001 0b00010101111001 0b00010101011001 0b11000000000000 0b00010110000001 0b00010110000101 0b00010110001101 0b11000000000000
+ )
***********************************************************************
.connect clk2 clkn
Xpcsel1 pcsel0 pcsel1 reset_0 and2
Wreset reset_1 nrz(0, 5, 20ns , 0ns, 0.001ns, 0.001ns)
+ 1 0
Xreset reset_0 reset_1 reset_inv nor2

***********************************************************************
* Program Counter
.subckt counter32 reset_1 reset_0 pcin[31:0] pcout[31:0] clkn
  Xmux reset_1#32 pcin[31:0] 0#32 in[31:0] mux2
  Xreset reset_0 clkn 0 clkin mux2
  Xreg in[31:0] clkn#32 pcout[31:0] dreg
.ends

Xpc1 reset_1 reset_0 pcin[31:0] pcout[31:0] clkn counter32

Xadd pcout[31:0] 0#29 vdd 0#3 pcincr[31:0] incrc[31:30] add32

***********************************************************************
Xbranch0 0#16 c[15:0] 0#3 vdd 0#3 cshift[31:0] shift32
Xbranch1 cshift[31:0] pcincr[31:0] 0 branch[31:0] branchc[31:30] add32

***********************************************************************
Xjcontrola control[13:12] pcsel[0:1] join
Xjcontrolb control11      ra2sel     join
Xjcontrolc control10      bsel       join
Xjcontrold control[9:8]   wdsel[1:0] join
Xjcontrole control[7:2]   alufn[5:0] join
Xjcontrolf control1       wr         join
Xjcontrolg control0       werf       join

Xjinsta inst[31:26] opcode[5:0] join
Xjinstb inst[25:21] rc[4:0]     join
Xjinstc inst[20:16] ra[4:0]     join
Xjinstd inst[15:11] rb[4:0]     join
Xjinste inst[15:0]  c[15:0]     join

Xz0 rd1_[31:0:4] rd1_[30:0:4] rd1_[29:0:4] rd1_[28:0:4] z[7:0] nor4
Xz1 z[7:0:4] z[6:0:4] z[5:0:4] z[4:0:4] z[9:8] nand4
Xz2 z9 z8 z nor2
Xjump rd1_[31:0] jump[31:0] join

***********************************************************************
* ALU
Xalu rd1_[31:0] b[31:0] alufn[5:0] alu[31:0] alu32

***********************************************************************
* Memory
.connect 0 mema[1:0]
Xmemrd alu[8:2] mema[8:2] join
Xmemwd rd2_[31:0] memwd[31:0] join
Xwr    reset_inv wr wr_ and2

* Registers
Xwerf0 rc4 rc3 rc2 rc1 werf_off_0 and4
Xwerf1 werf_off_0 rc0 werf_off_inv nand2
Xwerf2 reset_inv werf_off_inv werf werf_ and3
Xra ra[4:0] ra1_[4:0] join
Xwa rc[4:0] wa[4:0] join

***********************************************************************
* MUX for Control Signals
Xpcsel0 pcsel1#32 pcsel0#32 pcincr[31:0] branch[31:0] jump[31:0] pcout[31:0] pcin[31:0] mux4
Xra2sel ra2sel#5 rb[4:0] rc[4:0] ra2_[4:0] mux2
Xbsel bsel#32 rd2_[31:0] 0#16 c[15:0] b[31:0] mux2
Xwdsel wdsel0#32 wdsel1#32 pcincr[31:0] alu[31:0] memrd[31:0] 0#32 wd[31:0] mux4

***********************************************************************
Xjdisplaya ra2_b_wdsel[3:0] ra2sel bsel wdsel[1:0] join
Xjdisplayb wr_werf[1:0]     wr_ werf_                join

.tran 1240ns
.plot pcout[31:0]
.plot betaop(opcode[5:0])
.plot d(ra[4:0])
.plot d(rb[4:0])
.plot d(rc[4:0])
.plot sd(c[15:0])
.plot b(pcsel[0:1])
.plot b(ra2_b_wdsel[3:0])
.plot b(alufn[5:0])
.plot b(wr_werf[1:0])
.plot sd(rd1_[31:0])
.plot sd(rd2_[31:0])
.plot sd(wd[31:0])
.plot d(mema[8:0])
.plot sd(memrd[31:0])
.plot sd(memwd[31:0])