*Choachuy, Alana
*Evangelista, Abdiel
*Gerance, Clyde

.include "8clocks.jsim"
.include "labsubckts.jsim"

Xsum a[31:0] b[31:0] 0 sum[31:0] c31 c30 add32

Wa a[31:0] nrz(0, 5, 20ns, 0ns, 0.001ns, 0.001ns)
+ 0x00000000 0x55555555 0x00000000 0x55555555 0xFFFFFFFF
+ 0xAAAAAAAA 0x00000000 0xAAAAAAAA 0x00000001 0xFFFFFFFF

Wb b[31:0] nrz(0, 5, 20ns, 0ns, 0.001ns, 0.001ns)
+ 0x00000000 0x00000000 0x55555555 0x55555555 0xFFFFFFFF
+ 0x00000000 0xAAAAAAAA 0xAAAAAAAA 0xFFFFFFFF 0x00000001

*There is a longer transition delay for the last two test cases because
*when these hexadecimal numbers are converted to 32 bit notation,
*FFFFFFFF becomes 11111111111111111111111111111111 and 00000001 
*becomes 00000000000000000000000000000001. And so, adding these numbers
*will produce a total of 32 carries. With the implementation as it is,
*since the current full adder has to wait on the previous full adder to 
*produce a carry for its own carry input, every instance that there is 
*a carry output, there is a delay since the current full adder is waiting
*on the previous adders carry output. And so when this occurs 32 times,
*the delay becomes longer as seen in the results on the jsim graph.

.tran 200ns
.plot a[31:0]
.plot b[31:0]
.plot sum[31:0]