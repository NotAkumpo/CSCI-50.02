*Choachuy, Alana
*Evangelista, Abdiel
*Gerance, Clyde

.include "nominal.jsim"
.include "stdcell.jsim"

***LAB 2 STARTS HERE***
.subckt fx a b c d e f g out

*The function ABC + DE + FG is actually equal to !(!(ABC)!(DE)!(EF))
*Implementing this to a circuit only uses 4 NAND gates in total

Xa1 a b c abcn nand3
Xa2 d e den nand2
Xa3 f g fgn nand2

Xa4 abcn den fgn out nand3

.ends


.subckt fa x y z s c

*The sum of a full adder can be acquired by doing XOR on the 2 inputs then doing XOR
*again on the resulting output of this operation and the carry input 
Xb1 x y xyx xor2
Xb2 xyx z s xor2

*The carry output can be acquired by doing AND on the XOR of the inputs and the
*carry input then getting the OR of the output of this operation to the AND of
*the inputs. The same approach in the first sub-circuit is done for the ANDs
*and ORs where 3 NAND gates are used.
Xb3 xyx z xyxzn nand2
Xb4 x y xyn nand2
Xb5 xyxzn xyn c nand2

.ends

***LAB 2 ENDS HERE***



***LAB 3 STARTS HERE***

.subckt add32 a[31:0] b[31:0] c_in0 sum[31:0] c_out[31:30] 

*This makes 32 instances of a full adder which was done in lab 2, the carry input
*of the very first full adder is set to c_in0 which for the purpose of this lab 3
*will be set to 0 because this is the least significant bit so it will not have a
*carry. For the rest of the full adders, the previous carry output of the previous
*full adder becomes the carry input of the current full adder. This was all done
*in one line by making the very first carry input as c_in0 and the next 31 as the 
*carry outputs of the next 31 full adders. With this, a 32 bit adder is 
*successfully created with 32 full adders connected to each other.
Xc1 a[31:0] b[31:0] c_out[30:0] c_in0 sum[31:0] c_out[31:0] fa

.ends

***LAB 3 ENDS HERE



***LAB 4 STARTS HERE***

.subckt counter32 reset a[31:0] f[31:0] clk

Xd1 reset#32 sum[31:0] ground#32 z[31:0] mux2
Xe1 z[31:0] clk#32 f[31:0] dreg
Xf1 a[31:0] f[31:0] 0 sum[31:0] c31 c30 add32

.connect 0 ground

.ends

***LAB 4 ENDS HERE



***LAB 5 STARTS HERE***

.subckt as32 a[31:0] b[31:0] op0 fas[31:0] n v z

*Xg1 b[31:0] ib[31:0] inverter
*Xh1 op0#32 b[31:0] ib[31:0] wb[31:0] mux2
Xg1 op0#32 b[31:0] wb[31:0] xor2
Xi1 a[31:0] wb[31:0] op0 fas[31:0] c31 c30 add32
.connect fas31 n
Xj1 c31 c30 v xor2
Xk1 fas[31:0:4] fas[30:0:4] fas[29:0:4] fas[28:0:4] noa[7:0] nor4
Xl1 noa[7:4] noa[3:0] naa[1:0] nand4
Xm1 naa[1:0] z nor2

.ends


.subckt cmp32 n v z op[2:1] fcmp[31:0]

Xn1 n v xnv xor2
Xn2 op1 z wz nand2
Xn3 op2 xnv wn nand2
Xn4 wz wn fcmp0 nand2

.connect fcmp[31:1] 0

.ends

***LAB 5 ENDS HERE***



***LAB 6 STARTS HERE***

.subckt bool32 a[31:0] b[31:0] op[3:0] fbool[31:0]

Xo1 a[31:0] b[31:0] op0#32 op1#32 op2#32 op3#32 fbool[31:0] mux4

.ends


.subckt shift32 a[31:0] b[4:0] op[1:0] fshift[31:0]

Xp1 op0#32 a[0:31] a[31:0] wa[31:0] mux2
Xw1 a31 op1 sb and2
Xq1 b4#32 wa[31:0] sb#16 wa[31:16] wat[31:0] mux2
Xr1 b3#32 wat[31:0] sb#8 wat[31:8] was[31:0] mux2
Xs1 b2#32 was[31:0] sb#4 was[31:4] wae[31:0] mux2
Xt1 b1#32 wae[31:0] sb#2 wae[31:2] waf[31:0] mux2
Xu1 b0#32 waf[31:0] sb waf[31:1] wao[31:0] mux2
Xv1 op0#32 wao[0:31] wao[31:0] fshift[31:0] mux2

.ends


.subckt alu32 a[31:0] b[31:0] alufn[5:0] f[31:0]

Xas32 a[31:0] b[31:0] alufn0 fas[31:0] n v z as32
Xbool32 a[31:0] b[31:0] alufn[3:0] fbool[31:0] bool32
Xshift32 a[31:0] b[4:0] alufn[1:0] fshift[31:0] shift32
Xcmp32 n v z alufn[2:1] fcmp[31:0] cmp32
Xop alufn5#32 alufn4#32 fas[31:0] fshift[31:0] fbool[31:0] fcmp[31:0] f[31:0] mux4 

.ends

***LAB 6 ENDS HERE***