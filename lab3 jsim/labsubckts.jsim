.include "nominal.jsim"
.include "stdcell.jsim"


.subckt fx a b c d e f g out

*The function ABC + DE + FG is actually equal to !(!(ABC)!(DE)!(EF))
*Implementing this to a circuit only uses 4 NAND gates in total

Xa1 a b c abcn nand3
Xa2 d e den nand2
Xa3 f g fgn nand2

Xa4 abcn den fgn out nand3

.ends


.subckt fa x y z s c

*The sum of a full adder can be acquired by doing XOR on the 2 inputs then doing XOR
*again on the resulting output of this operation and the carry input 
Xb1 x y xyx xor2
Xb2 xyx z s xor2

*The carry output can be acquired by doing AND on the XOR of the inputs and the
*carry input then getting the OR of the output of this operation to the AND of
*the inputs. The same approach in the first sub-circuit is done for the ANDs
*and ORs where 3 NAND gates are used.
Xb3 xyx z xyxzn nand2
Xb4 x y xyn nand2
Xb5 xyxzn xyn c nand2

.ends


.subckt add32 a[31:0] b[31:0] c_in0 sum[31:0] c_out[31:30] 

Xc a[0:31] b[0:31] c_in0 c_out[0:30] sum[0:31] c_out[0:31] fa

.ends